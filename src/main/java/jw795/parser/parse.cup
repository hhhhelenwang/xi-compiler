import java_cup.runtime.*;

//TODO: connect to lexer

/* Terminals */
terminal    Token   USE, IF, WHILE, ELSE, RETURN, LENGTH, NOT, MULT, HIGHMULT, DIV, MOD, ADD,
                        SUB, LT, LEQ, GEQ, GT, EQ, NEQ, AND, OR, COLON, ASSIGN, LPAREN, RBRACK, LBRACE,
                        RBRACE, COMMA, SEMICOLON, UNDERSCORE;

terminal    Token   INT, BOOL, INTTYPE, BOOLTYPE, ID, CHARLIT, STRINGLIT;

terminal    Token   PROGRAM, INTERFACE;

/* Non terminals */
//non terminal

nonterminal function_lst;
nonterminal expr;
nonterminal block;


/* Precedences */
precedence nonassoc IF;
precedence nonassoc ELSE;

precedence left MULT, HIGHMULT, DIV, MOD;
precedence left ADD, SUB;
precedence left LT, LEQ, GEQ, GT;
precedence left EQ, NEQ;
precedence left AND;
precedence left OR;

/* The grammar rules */

// The Xi source file may be either a program file (extension .xi)
//or an interface file (extension .ixi)  parser should require the appropriate
//syntax for the kind of file it is parsing.
start with file;

file ::= PROGRAM_FILE program:p
        {: RESULT = p; :}
    | INTERFACE_FILE interface:i
        {: RESULT = i; :};

//============PROGRAM SESSION================
// ------------function------------

//A program contains a sequence of function definitions, including the definitions of the function main.


//A function definition starts with the name of the function, followed by its argument(s), its return type(s),
  //and the definition of its code.


// ------------expressions------------
// NOT, MULT, HIGHMULT, DIV, MOD, ADD, SUB, LT, LEQ, GEQ, GT, EQ, NEQ, AND, OR
expr ::=
    |NOT expre:e
    {: RESULT = null;:}
    | expre:e1 MULT expre:e2
    {: RESULT = null;:}
    |expre:e1 HIGHMULT expre:e2
    {: RESULT = null;:}
    | expre:e1 DIV expre:e2
    {: RESULT = null;:}
    |expre:e1 MOD expre:e2
    {: RESULT = null;:}
    |expre:e1 ADD expre:e2
    {: RESULT = null;:}
    | expre:e1 SUB expre:e2
    {: RESULT = null;:}
    |expre:e1 LT expre:e2
    {: RESULT = null;:}
    | expre:e1 LEQ expre:e2
    {: RESULT = null;:}
    |expre:e1 GEQ expre:e2
    {: RESULT = null;:}
    | expre:e1 GT expre:e2
    {: RESULT = null;:}
    | expre:e1 EQ expre:e2
    {: RESULT = null;:}
    |expre:e1 NEQ expre:e2
    {: RESULT = null;:}
    | expre:e1 AND expre:e2
    {: RESULT = null;:}
    | expre:e1 OR expre:e2
    {: RESULT = null;:};


// ------------statements------------
//A block may be empty or may contain a sequence of statements.
block ::= statement:s
    {: RESULT = null;:};

use_statuement ::= USE:u ID:i
    {: RESULT = null; :};

while_statement ::= WHILE:w expr:e block:b
    {: RESULT = null;:};

if_statement ::= IF expre:e block:b
    {: RESULT = null;:}
    | IF expr:e block:b ELSE block:b
    {: RESULT = null;:};

//variable declaration
var_declaration ::= ID:i COLON type:t
    {: RESULT = null;:};

